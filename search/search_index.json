{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jadarma's Dotfiles \u00b6 Welcome! This is the documentation for my dotfiles repo. Getting Started \u00b6 The preferred method of installation is to do a fresh install of Arch, then run the automated setup script. Please follow the Installation Guide for details. If, however, you wish to copy specific configurations only, all dotfiles are available in the source directory. Keep in mind that some configurations depend on other programs as well. After installation, you will be thrown into the graphical environment without much information. Most things are keyboard-driven. To learn how to use my setup, what features are available, and how to tweak the configurations to suit your tastes, please read the Usage Guide section. Screenshots \u00b6 Warning The dotfile repo is still in \"early\" development stage. While providing mostly a usable system out of the box, some functionality might still be missing, as this setup is transitioning from being on top of an existing Manjaro installation to its standalone Arch install.","title":"Jadarma's Dotfiles"},{"location":"#jadarmas-dotfiles","text":"Welcome! This is the documentation for my dotfiles repo.","title":"Jadarma's Dotfiles"},{"location":"#getting-started","text":"The preferred method of installation is to do a fresh install of Arch, then run the automated setup script. Please follow the Installation Guide for details. If, however, you wish to copy specific configurations only, all dotfiles are available in the source directory. Keep in mind that some configurations depend on other programs as well. After installation, you will be thrown into the graphical environment without much information. Most things are keyboard-driven. To learn how to use my setup, what features are available, and how to tweak the configurations to suit your tastes, please read the Usage Guide section.","title":"Getting Started"},{"location":"#screenshots","text":"Warning The dotfile repo is still in \"early\" development stage. While providing mostly a usable system out of the box, some functionality might still be missing, as this setup is transitioning from being on top of an existing Manjaro installation to its standalone Arch install.","title":"Screenshots"},{"location":"features/Hotkeys/","text":"Hotkeys \u00b6 All \"system-wide\" keyboard shortcuts are bound using the Simple X Hotkey Daemon, or sxhkd for short. Usage \u00b6 The daemon must run in order to register events. It is usually ran on user login, in this case via .xprofile : sxhkd & Key Bindings \u00b6 The following keybindings are available: Key Combination Action Super + Esc Reload the configuration file. Note Only sxhkd related bindings are shown here. Each feature should document its own added hotkeys. To view all bounded hotkeys, you can just print the configuration file. Configuration \u00b6 The configuration file can be found at .config/sxhkd/sxhkdrc . In short, the syntax is as follows: a key combination on one line followed by an indented line that is the command which will run if that key combination is pressed. The commands are run in a shell, so environment variables can be used as well. Curly braces can be used to bind multiple similar combinations that differ by one stroke. An underscore can be used to mean no key. You can also bind the script on press or release events. Example: super + {_, alt} + h notify-send \"{\ud83d\ude42 Hello,\ud83d\ude43 Goodbye\\, Cruel} World!\" In this example, a notification will appear, having a positive or negative message depending on whether the alt modifier was pressed. Read More \u00b6 GitHub: baskerville/sxhkd ArchWiki: sxhkd","title":"Hotkeys"},{"location":"features/Hotkeys/#hotkeys","text":"All \"system-wide\" keyboard shortcuts are bound using the Simple X Hotkey Daemon, or sxhkd for short.","title":"Hotkeys"},{"location":"features/Hotkeys/#usage","text":"The daemon must run in order to register events. It is usually ran on user login, in this case via .xprofile : sxhkd &","title":"Usage"},{"location":"features/Hotkeys/#key-bindings","text":"The following keybindings are available: Key Combination Action Super + Esc Reload the configuration file. Note Only sxhkd related bindings are shown here. Each feature should document its own added hotkeys. To view all bounded hotkeys, you can just print the configuration file.","title":"Key Bindings"},{"location":"features/Hotkeys/#configuration","text":"The configuration file can be found at .config/sxhkd/sxhkdrc . In short, the syntax is as follows: a key combination on one line followed by an indented line that is the command which will run if that key combination is pressed. The commands are run in a shell, so environment variables can be used as well. Curly braces can be used to bind multiple similar combinations that differ by one stroke. An underscore can be used to mean no key. You can also bind the script on press or release events. Example: super + {_, alt} + h notify-send \"{\ud83d\ude42 Hello,\ud83d\ude43 Goodbye\\, Cruel} World!\" In this example, a notification will appear, having a positive or negative message depending on whether the alt modifier was pressed.","title":"Configuration"},{"location":"features/Hotkeys/#read-more","text":"GitHub: baskerville/sxhkd ArchWiki: sxhkd","title":"Read More"},{"location":"features/UsageGuide/","text":"Usage Guide \u00b6 In this section you will find write-ups on most used tools, programs, and custom scripts. Refer to each individual page for more details. As a general rule, a brief explanation is also embedded as a commented header inside each configuration file, in case you need a short recap on hand. Table of Contents: \u00b6 Hotkeys Window Management (This section is still under construction.)","title":"Usage Guide"},{"location":"features/UsageGuide/#usage-guide","text":"In this section you will find write-ups on most used tools, programs, and custom scripts. Refer to each individual page for more details. As a general rule, a brief explanation is also embedded as a commented header inside each configuration file, in case you need a short recap on hand.","title":"Usage Guide"},{"location":"features/UsageGuide/#table-of-contents","text":"Hotkeys Window Management (This section is still under construction.)","title":"Table of Contents:"},{"location":"features/WindowManagement/","text":"Window Management \u00b6 This section describes working with windows using the bspwm tiling window manager. Usage \u00b6 The BSP from BSPWM stands for \"Binary Space Partition\". Imagine your desktop being the root node of a tree, with your windows as leaf nodes, splitting it up into \"branches\". It is a manual tiler, meaning you as the user are mostly responsible for moving them about. It has been chosen for the following reasons: Configured via shell scripts. Every aspect of bspwm is controlled via a command-line tool called bspc , meaning configurations and actions you can take are just scripts, making them very extensible. Minimalism. This is only a window manager. It does not come with its own hotkey daemon or even a status bar, allowing you to use whatever other tools you want without bloating your system with its default replacements. Painless Multi-Monitor. It is monitor-aware, and it is very easy to work with multiple monitors out of the box. Look over the documentation for general concepts and usage. The best way to learn is a hands-on approach. See the next section for hotkeys and currently available behavior. Hotkeys \u00b6 General Shortcuts \u00b6 Key Combination Action Super + Alt + Q Quit bspwm , the equivalent of logging out. Super + Alt + R Restart bspwm , the equivalent of running the bspwmrc script. Navigation / Focus Cycling \u00b6 With these key bindings you can shift focus between windows, or switch between workspaces and monitors. Key Combination Action Super + { 1 - 9 } Focus the given workspace. Super + { Up , Down , Left , Right } Focus the next node in the given direction. Super + { _, Shift } + Tab Focus the next / previous node on the current desktop. Super + { , , . } Focus the previous / next desktop on focused monitor. Super + Ctrl + { , , . } Focus the previous / next monitor. Node Creation / Destruction \u00b6 With these key bindings you can control where to insert new nodes, or remove existing ones. In preselect mode, a colored placeholder will occupy half the size of the current node, showing where the next node will be placed if it is created. The receptacles are empty nodes, and can be used for all sorts of stuff, but they're not really used here apart from keeping empty space. Key Combination Action Super + Shift + Q Close the focused node. Super + Ctrl + { Up , Down , Left , Right } Preselect the given direction. Do it again to cancel. Super + O Create a receptacle (an empty node). Super + Shift + O Close all receptacles on the current desktop. Super + Ctrl + { , , . } Focus the previous / next monitor. Node Movement / Switching \u00b6 These key bindings are used to move nodes to other desktops or have them swap places with other nodes on the same desktop. Key Combination Action Super + Shift + { Up , Down , Left , Right } Swap the focused node with the next one in the given direction (only within same desktop) Super + Ctrl + { 1 - 9 } Move the focused node to the given desktop. Super + Shift + { 1 - 9 } Move the focused node to the given desktop and focus on that desktop too. Node Tiling / Resizing \u00b6 These key bindings let you control the way nodes are tiled, their size, and the size of the gaps between them. The monocle layout is like fullscreen , but it keeps the status bar visible. In monocle mode, only the focused node is visible. Use the left / right focus navigation from earlier to switch between them. This is nice for having a \"background\" desktop, where you keep apps that you don't kneed to view more than one at once without cluttering it (like keeping Steam, Spotify, etc.). It is configured such that when there is only one node on a desktop, it automatically switches to monocle mode, so you don't see any gaps on the margins. Balancing and equalizing refer to the size of nodes. Balancing makes all nodes in a given subtree (the focused node being the \"root\") have the same area. Equalizing makes the focused node have half the area of the subtree (basically resetting the 50% split). Try them out; it will make sense immediately. Key Combination Action Super + M Toggle monocle mode. Super + T Toggle tiling mode (the default behaviour) for the focused node. Super + S Toggle floating mode for the focused node. Super + F Toggle fullscreen mode for the focused node. Super + ( Shift ) + R Rotate the subtree of the focused desktop / node clockwise. Super + ( Shift ) + B Balance the subtree of the focused desktop / node. Super + ( Shift ) + E Equalize the subtree of the focused desktop / node. Super + Alt + { Up , Down , Left , Right } Resize the node by growing or shrinking it in the given direction. Super + { [ , ] } Resize the gaps between all tiled nodes. Configuration \u00b6 The main configuration script can be found in $HOME/.config/bspwm/bspwmrc . This file will be sourced every time you start bspwm , in this case handled by the display manager. In here you can define how it behaves, and configure custom rules to make some windows behave differently depending on their properties. Examples include making some applications open on certain desktops by default, set some window classes to be floating, and so on. Read the bspc man page for more information on this. Since defining some rules can be very lengthy and ugly, and to keep the main config file easy to read, custom rules are defined in $HOME/.local/bin/bspwm/bspwm_external_rules . Monitor and desktop configurations are often different from machine to machine, the configs can be overridden by the host override file in $HOME/.config/dotfiles/$HOSTNAME/bspwm.sh , or a default is provided. The key bindings described above are defined in sxhkd . Some make use of custom scripts, which are found in $HOME/.local/bin/bspwm . Read More \u00b6 GitHub: baskerville/bspwm ArchWiki: bspwm","title":"Window Management"},{"location":"features/WindowManagement/#window-management","text":"This section describes working with windows using the bspwm tiling window manager.","title":"Window Management"},{"location":"features/WindowManagement/#usage","text":"The BSP from BSPWM stands for \"Binary Space Partition\". Imagine your desktop being the root node of a tree, with your windows as leaf nodes, splitting it up into \"branches\". It is a manual tiler, meaning you as the user are mostly responsible for moving them about. It has been chosen for the following reasons: Configured via shell scripts. Every aspect of bspwm is controlled via a command-line tool called bspc , meaning configurations and actions you can take are just scripts, making them very extensible. Minimalism. This is only a window manager. It does not come with its own hotkey daemon or even a status bar, allowing you to use whatever other tools you want without bloating your system with its default replacements. Painless Multi-Monitor. It is monitor-aware, and it is very easy to work with multiple monitors out of the box. Look over the documentation for general concepts and usage. The best way to learn is a hands-on approach. See the next section for hotkeys and currently available behavior.","title":"Usage"},{"location":"features/WindowManagement/#hotkeys","text":"","title":"Hotkeys"},{"location":"features/WindowManagement/#general-shortcuts","text":"Key Combination Action Super + Alt + Q Quit bspwm , the equivalent of logging out. Super + Alt + R Restart bspwm , the equivalent of running the bspwmrc script.","title":"General Shortcuts"},{"location":"features/WindowManagement/#navigation-focus-cycling","text":"With these key bindings you can shift focus between windows, or switch between workspaces and monitors. Key Combination Action Super + { 1 - 9 } Focus the given workspace. Super + { Up , Down , Left , Right } Focus the next node in the given direction. Super + { _, Shift } + Tab Focus the next / previous node on the current desktop. Super + { , , . } Focus the previous / next desktop on focused monitor. Super + Ctrl + { , , . } Focus the previous / next monitor.","title":"Navigation / Focus Cycling"},{"location":"features/WindowManagement/#node-creation-destruction","text":"With these key bindings you can control where to insert new nodes, or remove existing ones. In preselect mode, a colored placeholder will occupy half the size of the current node, showing where the next node will be placed if it is created. The receptacles are empty nodes, and can be used for all sorts of stuff, but they're not really used here apart from keeping empty space. Key Combination Action Super + Shift + Q Close the focused node. Super + Ctrl + { Up , Down , Left , Right } Preselect the given direction. Do it again to cancel. Super + O Create a receptacle (an empty node). Super + Shift + O Close all receptacles on the current desktop. Super + Ctrl + { , , . } Focus the previous / next monitor.","title":"Node Creation / Destruction"},{"location":"features/WindowManagement/#node-movement-switching","text":"These key bindings are used to move nodes to other desktops or have them swap places with other nodes on the same desktop. Key Combination Action Super + Shift + { Up , Down , Left , Right } Swap the focused node with the next one in the given direction (only within same desktop) Super + Ctrl + { 1 - 9 } Move the focused node to the given desktop. Super + Shift + { 1 - 9 } Move the focused node to the given desktop and focus on that desktop too.","title":"Node Movement / Switching"},{"location":"features/WindowManagement/#node-tiling-resizing","text":"These key bindings let you control the way nodes are tiled, their size, and the size of the gaps between them. The monocle layout is like fullscreen , but it keeps the status bar visible. In monocle mode, only the focused node is visible. Use the left / right focus navigation from earlier to switch between them. This is nice for having a \"background\" desktop, where you keep apps that you don't kneed to view more than one at once without cluttering it (like keeping Steam, Spotify, etc.). It is configured such that when there is only one node on a desktop, it automatically switches to monocle mode, so you don't see any gaps on the margins. Balancing and equalizing refer to the size of nodes. Balancing makes all nodes in a given subtree (the focused node being the \"root\") have the same area. Equalizing makes the focused node have half the area of the subtree (basically resetting the 50% split). Try them out; it will make sense immediately. Key Combination Action Super + M Toggle monocle mode. Super + T Toggle tiling mode (the default behaviour) for the focused node. Super + S Toggle floating mode for the focused node. Super + F Toggle fullscreen mode for the focused node. Super + ( Shift ) + R Rotate the subtree of the focused desktop / node clockwise. Super + ( Shift ) + B Balance the subtree of the focused desktop / node. Super + ( Shift ) + E Equalize the subtree of the focused desktop / node. Super + Alt + { Up , Down , Left , Right } Resize the node by growing or shrinking it in the given direction. Super + { [ , ] } Resize the gaps between all tiled nodes.","title":"Node Tiling / Resizing"},{"location":"features/WindowManagement/#configuration","text":"The main configuration script can be found in $HOME/.config/bspwm/bspwmrc . This file will be sourced every time you start bspwm , in this case handled by the display manager. In here you can define how it behaves, and configure custom rules to make some windows behave differently depending on their properties. Examples include making some applications open on certain desktops by default, set some window classes to be floating, and so on. Read the bspc man page for more information on this. Since defining some rules can be very lengthy and ugly, and to keep the main config file easy to read, custom rules are defined in $HOME/.local/bin/bspwm/bspwm_external_rules . Monitor and desktop configurations are often different from machine to machine, the configs can be overridden by the host override file in $HOME/.config/dotfiles/$HOSTNAME/bspwm.sh , or a default is provided. The key bindings described above are defined in sxhkd . Some make use of custom scripts, which are found in $HOME/.local/bin/bspwm .","title":"Configuration"},{"location":"features/WindowManagement/#read-more","text":"GitHub: baskerville/bspwm ArchWiki: bspwm","title":"Read More"},{"location":"install/00_InstallationGuide/","text":"Installation Guide \u00b6 This guide provides all the steps required for a production ready installation, complete with (almost) full disk encryption and logical volume management. If these are not features you need, or are planning to just install on a virtual machine, you might be better off following the standard installation guide . Before you proceed, take note of the following: This installation process is opinionated , because it is just the way I do it, not the only way. Unfortunately it uses systemd-boot as a bootloader... I know, I hate it too, but it works better than GRUB for me. 1. Installation Media 1.1 Get an Arch ISO 1.2 Check UEFI 1.3 Check Internet Connection 1.4 Sync System Clock 1.5 Sync Pacman Mirrors 2. Disk Formatting 2.1 Secure Wipe (Optional) 2.2 Partitioning 2.3 LUKS Encryption 2.4 LVM Partitioning 2.5 Filesystem Formatting 3. Base Installation 3.1 Mounting Volumes 3.2 Bootstrapping 3.3 Network Access 3.4 Root Password 3.5 Initramfs 3.6 Boot Loader 3.7. Unmount and Reboot 4. Dotfiles Setup 4.1 Clone the Repository 4.2 Setup Script 4.3 Installation Complete Warning This guide is not a replacement for reading the manual. It tries to hold your hand while still providing valuable insights, but it's always a good idea to also follow the links to the official documentation when in doubt. When in doubt, please consult the official documentation over at the Arch Wiki . It gives you more details and warnings over what can go wrong and how to prevent it.","title":"Installation Guide"},{"location":"install/00_InstallationGuide/#installation-guide","text":"This guide provides all the steps required for a production ready installation, complete with (almost) full disk encryption and logical volume management. If these are not features you need, or are planning to just install on a virtual machine, you might be better off following the standard installation guide . Before you proceed, take note of the following: This installation process is opinionated , because it is just the way I do it, not the only way. Unfortunately it uses systemd-boot as a bootloader... I know, I hate it too, but it works better than GRUB for me. 1. Installation Media 1.1 Get an Arch ISO 1.2 Check UEFI 1.3 Check Internet Connection 1.4 Sync System Clock 1.5 Sync Pacman Mirrors 2. Disk Formatting 2.1 Secure Wipe (Optional) 2.2 Partitioning 2.3 LUKS Encryption 2.4 LVM Partitioning 2.5 Filesystem Formatting 3. Base Installation 3.1 Mounting Volumes 3.2 Bootstrapping 3.3 Network Access 3.4 Root Password 3.5 Initramfs 3.6 Boot Loader 3.7. Unmount and Reboot 4. Dotfiles Setup 4.1 Clone the Repository 4.2 Setup Script 4.3 Installation Complete Warning This guide is not a replacement for reading the manual. It tries to hold your hand while still providing valuable insights, but it's always a good idea to also follow the links to the official documentation when in doubt. When in doubt, please consult the official documentation over at the Arch Wiki . It gives you more details and warnings over what can go wrong and how to prevent it.","title":"Installation Guide"},{"location":"install/10_InstallationMedia/","text":"Installation Media \u00b6 While it is possible to install arch from an existing Linux , it is recommended you do a fresh install, since it reduces the variables involved in your install. This guide assumes you are installing from an Arch ISO loaded from a USB Flash drive. 1.1 Get an Arch ISO \u00b6 To set up the drive, download the latest Arch Linux ISO and verify the signature (Optional) . Flash it to your drive with dd , for example. Get the block device name of your USB drive, here /dev/sdx . sudo lsblk sudo dd if = /path/to/iso of = /dev/sdx bs = 4096 status = progress Danger Selecting the wrong device might lead to you overwriting your own data! Now plug the drive into the host you wish to install to and boot into the Arch ISO. 1.2 Check UEFI \u00b6 Ensure that your system is UEFI capable. If the following directory is not empty, it is. ls /sys/firmware/efi 1.3 Check Internet Connection \u00b6 If you are using a device with a wired connection, check your connection: ping archlinux.org If you are on a laptop and cannot establish a wired connection, you must first connect to a wireless network. For this you must use iwd , which is already present on the ISO. First, find the name of your wireless interface. Then, if you're not sure what networks are available, do a scan and take note of the network name (or SSID) . Finally, connect to the network; you will be prompted for a password if necessary. iwctl device list # > $DEVICE iwctl station $DEVICE get-networks. # > $SSID iwctl station $DEVICE connect $SSID Pinging a server should now work. 1.4 Sync System Clock \u00b6 Update your system clock with the following command: timedatectl set-ntp true 1.5 Sync Pacman Mirrors \u00b6 In case your ISO was made long ago, it might be that your mirrors are out of date, and pacman will struggle to install some packages. To update them: pacman -Syy pacman-mirrorlist archlinux-keyring pacman-key --refresh-keys mv /etc/pacman.d/mirrorlist.pacnew /etc/pacman.d/mirrorlist You may now edit the /etc/pacman.d/mirrorlist and uncomment the mirrors you wish to use. Usually you'd want the world-wide mirrors along with a few near your geographical location.","title":"Installation Media"},{"location":"install/10_InstallationMedia/#installation-media","text":"While it is possible to install arch from an existing Linux , it is recommended you do a fresh install, since it reduces the variables involved in your install. This guide assumes you are installing from an Arch ISO loaded from a USB Flash drive.","title":"Installation Media"},{"location":"install/10_InstallationMedia/#11-get-an-arch-iso","text":"To set up the drive, download the latest Arch Linux ISO and verify the signature (Optional) . Flash it to your drive with dd , for example. Get the block device name of your USB drive, here /dev/sdx . sudo lsblk sudo dd if = /path/to/iso of = /dev/sdx bs = 4096 status = progress Danger Selecting the wrong device might lead to you overwriting your own data! Now plug the drive into the host you wish to install to and boot into the Arch ISO.","title":"1.1 Get an Arch ISO"},{"location":"install/10_InstallationMedia/#12-check-uefi","text":"Ensure that your system is UEFI capable. If the following directory is not empty, it is. ls /sys/firmware/efi","title":"1.2 Check UEFI"},{"location":"install/10_InstallationMedia/#13-check-internet-connection","text":"If you are using a device with a wired connection, check your connection: ping archlinux.org If you are on a laptop and cannot establish a wired connection, you must first connect to a wireless network. For this you must use iwd , which is already present on the ISO. First, find the name of your wireless interface. Then, if you're not sure what networks are available, do a scan and take note of the network name (or SSID) . Finally, connect to the network; you will be prompted for a password if necessary. iwctl device list # > $DEVICE iwctl station $DEVICE get-networks. # > $SSID iwctl station $DEVICE connect $SSID Pinging a server should now work.","title":"1.3 Check Internet Connection"},{"location":"install/10_InstallationMedia/#14-sync-system-clock","text":"Update your system clock with the following command: timedatectl set-ntp true","title":"1.4 Sync System Clock"},{"location":"install/10_InstallationMedia/#15-sync-pacman-mirrors","text":"In case your ISO was made long ago, it might be that your mirrors are out of date, and pacman will struggle to install some packages. To update them: pacman -Syy pacman-mirrorlist archlinux-keyring pacman-key --refresh-keys mv /etc/pacman.d/mirrorlist.pacnew /etc/pacman.d/mirrorlist You may now edit the /etc/pacman.d/mirrorlist and uncomment the mirrors you wish to use. Usually you'd want the world-wide mirrors along with a few near your geographical location.","title":"1.5 Sync Pacman Mirrors"},{"location":"install/20_DiskFormatting/","text":"Disk Formatting \u00b6 This section only covers partitioning the main drive on which Arch will be installed, for sake of simplicity. If you have other drives you wish to use, you can handle those here as well, but if they are only for extra storage, and will not hold system partitions, then you can always configure them later. To see what drives are available to you, run lsblk and find your desired device. The name might differ if you have an SSD or NVME drive ( nvme0n1 ). This guide will use /dev/sdx as the installation drive. Replace all occurrences with your own value. Danger All the data on this drive will be irrevocably destroyed. Make all necessary backups now. Warning Be extra careful not to run the commands in this section on the wrong devices, as it may lead to data loss too! 2.1 Secure Wipe (Optional) \u00b6 Since we will be using full disk encryption, in order to reduce the attack vector, it is good practice to first securely wipe the drive. Note Wiping is a bit tricky for solid state drives, and can be skipped if you don't want the hassle. If you decide to do it, be sure to read the documentation . For general use, zeroing out the drive is enough: dd if = /dev/zero of = /dev/sdx bs = 1M status = progress If you're feeling paranoid, use shred instead. Depending on the size of your drive, this can take a few hours . 2.2 Partitioning \u00b6 We will be using full disk encryption, so we only need two partitions: one for our boot, and the rest of the drive. You may use any partitioning tool you desire, here we will use gdisk . gdisk /dev/sdx Then do the following: View help. ( ? ) Create a new GPT. ( o ) Create a new 550 MB EFI partition. ( n <default> <default> +550M ef00 ) Create a new LVM partition for the rest of the drive. ( n <default> <default> <default> 8e00 ) Save the changes and exit. ( w ) Running lsblk again should show the two partitions as /dev/sdx1 and /dev/sdx2 . 2.3 LUKS Encryption \u00b6 The drive is cleaned and partitioned. It's time to encrypt it with LUKS. Danger Forgetting the password for your LUKS container results in a permanent loss of access to the drive's contents. Store it in a safe place, like a password manager. cryptsetup -v -y \\ -c aes-xts-plain64 -s 512 -h sha512 -i 4000 --use-random \\ luksFormat --type luks2 /dev/sdx2 An explanation of above options: -v : Verbose, increases output for debugging in case something goes wrong. -y : Ask for the password interactively, twice, and matches them before proceeding. -c : Specifies the cypher, in this case aes-xts-plain64 is the default for the LUKS2 format. -s : Specifies the key size used by the cypher. -h : Specifies the hashing algorithm used, sha256 by default. -i : Milliseconds to spend processing the passphrase, 2000 by default. --use-random Specifies the RNG source, another option is --use-urandom . luksFormat : Operation mode that encrypts a partition and sets a passphrase. --type : Specify the LUKS type to use. /dev/sdx2 : The partition you wish to encrypt. Tip You can inspect the LUKS header to check everything OK with cryptsetup luksDump /dev/sdx2 . It is also a good practice to back it up. Create a copy with cryptsetup luksHeaderBackup --header-backup-file /a/path/header.img /dev/sdx2 . Do so when it is convenient to save it in another location. Now, we need to open the LUKS container: cryptsetup open --type luks /dev/sdx2 lvm 2.4 LVM Partitioning \u00b6 Now we will create our system partitions inside the encrypted LUKS container using LVM . This has some advantages, at the cost of another mapping layer: Simple and resizable partitions. A single key required to unlock all volumes (simplifies the boot process) Partition layout invisible when locked. An encrypted swap partition allows for easy hibernation . Check the LVM disk exists, as mapped earlier. ls /dev/mapper/lvm Create a physical volume, and a volume group within it (here called volume ). pvcreate /dev/mapper/lvm vgcreate volume /dev/mapper/lvm Create the logical partitions you want to use. It's up to you if you want to create a separate home partition. If you do, decide how much to reserve for your root partition. Recommended size is about 40 GB, with a minimum of 20. I like to have extra room just in case, so I go for 64 GB. This is LVM, so you can resize if needed. lvcreate -L16G volume -n swap lvcreate -L64G volume -n root lvcreate -l 100 %FREE volume -n home 2.5 Filesystem Formatting \u00b6 All the partitions are in place, we can now format them with the appropriate filesystems: mkfs.fat -F32 /dev/sdx1 mkfs.ext4 /dev/mapper/volume-root mkfs.ext4 /dev/mapper/volume-home mkswap /dev/mapper/volume-swap","title":"Disk Formatting"},{"location":"install/20_DiskFormatting/#disk-formatting","text":"This section only covers partitioning the main drive on which Arch will be installed, for sake of simplicity. If you have other drives you wish to use, you can handle those here as well, but if they are only for extra storage, and will not hold system partitions, then you can always configure them later. To see what drives are available to you, run lsblk and find your desired device. The name might differ if you have an SSD or NVME drive ( nvme0n1 ). This guide will use /dev/sdx as the installation drive. Replace all occurrences with your own value. Danger All the data on this drive will be irrevocably destroyed. Make all necessary backups now. Warning Be extra careful not to run the commands in this section on the wrong devices, as it may lead to data loss too!","title":"Disk Formatting"},{"location":"install/20_DiskFormatting/#21-secure-wipe-optional","text":"Since we will be using full disk encryption, in order to reduce the attack vector, it is good practice to first securely wipe the drive. Note Wiping is a bit tricky for solid state drives, and can be skipped if you don't want the hassle. If you decide to do it, be sure to read the documentation . For general use, zeroing out the drive is enough: dd if = /dev/zero of = /dev/sdx bs = 1M status = progress If you're feeling paranoid, use shred instead. Depending on the size of your drive, this can take a few hours .","title":"2.1 Secure Wipe (Optional)"},{"location":"install/20_DiskFormatting/#22-partitioning","text":"We will be using full disk encryption, so we only need two partitions: one for our boot, and the rest of the drive. You may use any partitioning tool you desire, here we will use gdisk . gdisk /dev/sdx Then do the following: View help. ( ? ) Create a new GPT. ( o ) Create a new 550 MB EFI partition. ( n <default> <default> +550M ef00 ) Create a new LVM partition for the rest of the drive. ( n <default> <default> <default> 8e00 ) Save the changes and exit. ( w ) Running lsblk again should show the two partitions as /dev/sdx1 and /dev/sdx2 .","title":"2.2 Partitioning"},{"location":"install/20_DiskFormatting/#23-luks-encryption","text":"The drive is cleaned and partitioned. It's time to encrypt it with LUKS. Danger Forgetting the password for your LUKS container results in a permanent loss of access to the drive's contents. Store it in a safe place, like a password manager. cryptsetup -v -y \\ -c aes-xts-plain64 -s 512 -h sha512 -i 4000 --use-random \\ luksFormat --type luks2 /dev/sdx2 An explanation of above options: -v : Verbose, increases output for debugging in case something goes wrong. -y : Ask for the password interactively, twice, and matches them before proceeding. -c : Specifies the cypher, in this case aes-xts-plain64 is the default for the LUKS2 format. -s : Specifies the key size used by the cypher. -h : Specifies the hashing algorithm used, sha256 by default. -i : Milliseconds to spend processing the passphrase, 2000 by default. --use-random Specifies the RNG source, another option is --use-urandom . luksFormat : Operation mode that encrypts a partition and sets a passphrase. --type : Specify the LUKS type to use. /dev/sdx2 : The partition you wish to encrypt. Tip You can inspect the LUKS header to check everything OK with cryptsetup luksDump /dev/sdx2 . It is also a good practice to back it up. Create a copy with cryptsetup luksHeaderBackup --header-backup-file /a/path/header.img /dev/sdx2 . Do so when it is convenient to save it in another location. Now, we need to open the LUKS container: cryptsetup open --type luks /dev/sdx2 lvm","title":"2.3 LUKS Encryption"},{"location":"install/20_DiskFormatting/#24-lvm-partitioning","text":"Now we will create our system partitions inside the encrypted LUKS container using LVM . This has some advantages, at the cost of another mapping layer: Simple and resizable partitions. A single key required to unlock all volumes (simplifies the boot process) Partition layout invisible when locked. An encrypted swap partition allows for easy hibernation . Check the LVM disk exists, as mapped earlier. ls /dev/mapper/lvm Create a physical volume, and a volume group within it (here called volume ). pvcreate /dev/mapper/lvm vgcreate volume /dev/mapper/lvm Create the logical partitions you want to use. It's up to you if you want to create a separate home partition. If you do, decide how much to reserve for your root partition. Recommended size is about 40 GB, with a minimum of 20. I like to have extra room just in case, so I go for 64 GB. This is LVM, so you can resize if needed. lvcreate -L16G volume -n swap lvcreate -L64G volume -n root lvcreate -l 100 %FREE volume -n home","title":"2.4 LVM Partitioning"},{"location":"install/20_DiskFormatting/#25-filesystem-formatting","text":"All the partitions are in place, we can now format them with the appropriate filesystems: mkfs.fat -F32 /dev/sdx1 mkfs.ext4 /dev/mapper/volume-root mkfs.ext4 /dev/mapper/volume-home mkswap /dev/mapper/volume-swap","title":"2.5 Filesystem Formatting"},{"location":"install/30_BaseInstallation/","text":"Base Installation \u00b6 This section covers bootstrapping the system so that it can boot and function on its own. 3.1. Mounting Volumes \u00b6 We need to mount our volumes before we can bootstrap and configure the installation. All the volumes need to be mounted in /mnt , to their appropriate mount points. mount /dev/mapper/volume-root /mnt mkdir /mnt/boot mount /dev/sdx1 /mnt/boot mkdir /mnt/home mount /dev/mapper/volume-home /mnt/home swapon /dev/mapper/volume-swap 3.2 Bootstrapping \u00b6 Bootstrap the base system onto the disk. This might take a while depending on your connection. pacstrap /mnt base base-devel linux linux-firmware neovim zsh git Tip You can replace linux with whatever kernel you want. For example, consider linux-zen for better performance in everyday use. Note Install your text editor of choice. This guide shall use nvim , but feel free to use vi , vim , nano or whatever else. Next, generate the fstab file. While the -U option is not really required for LVM, I still prefer using UUIDs. genfstab -Up /mnt > /mnt/etc/fstab Now chroot into the system. Don't worry, the prompt change is expected. arch-chroot /mnt 3.3 Network Access \u00b6 We are currently getting our network connection from the Arch ISO. If we boot into the actual installation, we won't have any internet connection. pacman -S networkmanager inetutils systemctl enable NetworkManager If your device does not have Wi-Fi capabilities, you may skip to the next step. For Wi-Fi, I recommend going with the newer iwd , which is what we have used in the Arch ISO. pacman -S iwd systemctl enable iwd Next, configure NetworkManager to use iwd as a backend . Simply create the /etc/NetworkManager/conf.d/wifi_backend.conf file with the following contents: [device] wifi.backend=iwd That's it. You will now be able to have network access from your own machine after installation. Note NetworkManager takes control of iwd , so you cannot use iwctl to connect to wireless networks anymore. Instead, use nmcli , as described on the Wiki . 3.4 Root Password \u00b6 Set the password for the root account. passwd It's also a good idea to enable the wheel group, so you can run commands as root with other administrator users after the installation. In /etc/sudoers , uncomment the following lines. (Use wq! to bypass readonly file warning.) %wheel ALL=(ALL) ALL 3.5 Initramfs \u00b6 Because we are using LVM on LUKS , we need to add the encrypt and lvm2 hooks into mkinitcpio.conf . pacman -S lvm2 nvim /etc/mkinitcpio.conf Change the hooks line to: HOOKS=(base udev autodetect modconf block keyboard keymap encrypt lvm2 filesystems fsck) Then build the initramfs image by running: mkinitcpio -p linux Note If when bootstrapping with pacstrap you installed a custom kernel, that same kernel should be passed to the -p option (e.g. mkinitcpio -p linux-zen ) . 3.6 Boot Loader \u00b6 We can now install a boot loader . In this guide, we will be using systemd-boot . First, install the microcode depending on your system's CPU. pacman -S amd-ucode Install the boot loader. bootctl install Edit the configuration file at /boot/loader/loader.conf with the following: default arch timeout 3 editor 0 This achieves the following: * Sets arch as the default entry (to be created soon) . * Offers the user three seconds to select another entry before booting the default. * Does not allow the kernel parameters to be edited. Now we need to add an entry for arch . nvim /boot/loader/entries/arch.conf Follow the template: title Arch Linux linux /vmlinuz-linux initrd /amd-ucode.img initrd /initramfs-linux.img options cryptdevice=UUID={UUID}:volume root=/dev/mapper/volume-root quiet rw You will need to adjust it as follows: The title can be whatever you want displayed in the boot menu. Change to your relevant *-ucode.img depending on your system. Again, a custom kernel will result in a different linux and init image. (e.g. /vmlinuz-linux-zen and /initramfs-linux-zen.img ) The {UUID} should be replaced by the block device ID of the encrypted partition ( /dev/sdx2 ), which you can get by running blkid /dev/sdx2 . Tip If using vim , you can insert the output of the blkid command right in the editor by typing: ^ESC :r! blkid /dev/sdx2 3.7. Unmount and Reboot \u00b6 We no longer need the Arch ISO as the base system is already configured. Unmount the volume, turn off the swap, close the LVM and LUKS container, and reboot. exit # Or Ctrl+D to get out of `chroot`. umount -R /mnt swapoff /dev/mapper/volume-swap vgchange -a n volume cryptsetup close /dev/mapper/lvm reboot","title":"Base Installation"},{"location":"install/30_BaseInstallation/#base-installation","text":"This section covers bootstrapping the system so that it can boot and function on its own.","title":"Base Installation"},{"location":"install/30_BaseInstallation/#31-mounting-volumes","text":"We need to mount our volumes before we can bootstrap and configure the installation. All the volumes need to be mounted in /mnt , to their appropriate mount points. mount /dev/mapper/volume-root /mnt mkdir /mnt/boot mount /dev/sdx1 /mnt/boot mkdir /mnt/home mount /dev/mapper/volume-home /mnt/home swapon /dev/mapper/volume-swap","title":"3.1. Mounting Volumes"},{"location":"install/30_BaseInstallation/#32-bootstrapping","text":"Bootstrap the base system onto the disk. This might take a while depending on your connection. pacstrap /mnt base base-devel linux linux-firmware neovim zsh git Tip You can replace linux with whatever kernel you want. For example, consider linux-zen for better performance in everyday use. Note Install your text editor of choice. This guide shall use nvim , but feel free to use vi , vim , nano or whatever else. Next, generate the fstab file. While the -U option is not really required for LVM, I still prefer using UUIDs. genfstab -Up /mnt > /mnt/etc/fstab Now chroot into the system. Don't worry, the prompt change is expected. arch-chroot /mnt","title":"3.2 Bootstrapping"},{"location":"install/30_BaseInstallation/#33-network-access","text":"We are currently getting our network connection from the Arch ISO. If we boot into the actual installation, we won't have any internet connection. pacman -S networkmanager inetutils systemctl enable NetworkManager If your device does not have Wi-Fi capabilities, you may skip to the next step. For Wi-Fi, I recommend going with the newer iwd , which is what we have used in the Arch ISO. pacman -S iwd systemctl enable iwd Next, configure NetworkManager to use iwd as a backend . Simply create the /etc/NetworkManager/conf.d/wifi_backend.conf file with the following contents: [device] wifi.backend=iwd That's it. You will now be able to have network access from your own machine after installation. Note NetworkManager takes control of iwd , so you cannot use iwctl to connect to wireless networks anymore. Instead, use nmcli , as described on the Wiki .","title":"3.3 Network Access"},{"location":"install/30_BaseInstallation/#34-root-password","text":"Set the password for the root account. passwd It's also a good idea to enable the wheel group, so you can run commands as root with other administrator users after the installation. In /etc/sudoers , uncomment the following lines. (Use wq! to bypass readonly file warning.) %wheel ALL=(ALL) ALL","title":"3.4 Root Password"},{"location":"install/30_BaseInstallation/#35-initramfs","text":"Because we are using LVM on LUKS , we need to add the encrypt and lvm2 hooks into mkinitcpio.conf . pacman -S lvm2 nvim /etc/mkinitcpio.conf Change the hooks line to: HOOKS=(base udev autodetect modconf block keyboard keymap encrypt lvm2 filesystems fsck) Then build the initramfs image by running: mkinitcpio -p linux Note If when bootstrapping with pacstrap you installed a custom kernel, that same kernel should be passed to the -p option (e.g. mkinitcpio -p linux-zen ) .","title":"3.5 Initramfs"},{"location":"install/30_BaseInstallation/#36-boot-loader","text":"We can now install a boot loader . In this guide, we will be using systemd-boot . First, install the microcode depending on your system's CPU. pacman -S amd-ucode Install the boot loader. bootctl install Edit the configuration file at /boot/loader/loader.conf with the following: default arch timeout 3 editor 0 This achieves the following: * Sets arch as the default entry (to be created soon) . * Offers the user three seconds to select another entry before booting the default. * Does not allow the kernel parameters to be edited. Now we need to add an entry for arch . nvim /boot/loader/entries/arch.conf Follow the template: title Arch Linux linux /vmlinuz-linux initrd /amd-ucode.img initrd /initramfs-linux.img options cryptdevice=UUID={UUID}:volume root=/dev/mapper/volume-root quiet rw You will need to adjust it as follows: The title can be whatever you want displayed in the boot menu. Change to your relevant *-ucode.img depending on your system. Again, a custom kernel will result in a different linux and init image. (e.g. /vmlinuz-linux-zen and /initramfs-linux-zen.img ) The {UUID} should be replaced by the block device ID of the encrypted partition ( /dev/sdx2 ), which you can get by running blkid /dev/sdx2 . Tip If using vim , you can insert the output of the blkid command right in the editor by typing: ^ESC :r! blkid /dev/sdx2","title":"3.6 Boot Loader"},{"location":"install/30_BaseInstallation/#37-unmount-and-reboot","text":"We no longer need the Arch ISO as the base system is already configured. Unmount the volume, turn off the swap, close the LVM and LUKS container, and reboot. exit # Or Ctrl+D to get out of `chroot`. umount -R /mnt swapoff /dev/mapper/volume-swap vgchange -a n volume cryptsetup close /dev/mapper/lvm reboot","title":"3.7. Unmount and Reboot"},{"location":"install/40_DotfilesSetup/","text":"Dotfiles Setup \u00b6 Warning The setup script is a working prototype, but has not yet been fully completed. It might be changed in the future. Now that you have a minimal Arch install, it is finally time to install the dotfiles. There are only two prerequisites to running it: zsh and git , both of which we already installed during bootstrapping. To double-check you can use pacman -Q zsh git . 4.1 Clone the Repository \u00b6 Choose any location you'd like. I usually go for /tmp . Just clone the repository somewhere then cd into it. mkdir /tmp/dotfiles git clone https://github.com/Jadarma/dotfiles.git /tmp/dotfiles cd /tmp/dotfiles 4.2 Setup Script \u00b6 The script is automated and reads its configuration from the setup/conf/dotinstall.conf file. Here, you can edit various options to customise your installation to your liking. You definitely want to edit this file to set your own values, as it comes preconfigured with my own settings. Each config variable is documented. Read more details there. nvim setup/conf/dotinstall.conf Once you are satisfied with your settings, just run the main script. You will be prompted for a disclaimer, and a password for the new user, if necessary. zsh setup/dotinstall.zsh Danger The setup process was intended to be used on a fresh installation. If you are trying to install this over your existing setup, I would recommend you just do it manually, by following the commands in the script. Proceed at your own risk. 4.3 Installation Complete \u00b6 You may now reboot and be greeted by the login screen. That's it! Enjoy your new setup!","title":"Dotfiles Setup"},{"location":"install/40_DotfilesSetup/#dotfiles-setup","text":"Warning The setup script is a working prototype, but has not yet been fully completed. It might be changed in the future. Now that you have a minimal Arch install, it is finally time to install the dotfiles. There are only two prerequisites to running it: zsh and git , both of which we already installed during bootstrapping. To double-check you can use pacman -Q zsh git .","title":"Dotfiles Setup"},{"location":"install/40_DotfilesSetup/#41-clone-the-repository","text":"Choose any location you'd like. I usually go for /tmp . Just clone the repository somewhere then cd into it. mkdir /tmp/dotfiles git clone https://github.com/Jadarma/dotfiles.git /tmp/dotfiles cd /tmp/dotfiles","title":"4.1 Clone the Repository"},{"location":"install/40_DotfilesSetup/#42-setup-script","text":"The script is automated and reads its configuration from the setup/conf/dotinstall.conf file. Here, you can edit various options to customise your installation to your liking. You definitely want to edit this file to set your own values, as it comes preconfigured with my own settings. Each config variable is documented. Read more details there. nvim setup/conf/dotinstall.conf Once you are satisfied with your settings, just run the main script. You will be prompted for a disclaimer, and a password for the new user, if necessary. zsh setup/dotinstall.zsh Danger The setup process was intended to be used on a fresh installation. If you are trying to install this over your existing setup, I would recommend you just do it manually, by following the commands in the script. Proceed at your own risk.","title":"4.2 Setup Script"},{"location":"install/40_DotfilesSetup/#43-installation-complete","text":"You may now reboot and be greeted by the login screen. That's it! Enjoy your new setup!","title":"4.3 Installation Complete"}]}